Сначала запускаем первую программу, вводим какой то текст в консоль, потом запускаем вторую программу, она получает сообщение из первой

ПЕРВАЯ ПРОГРАММА (записывающий процесс):
#include <iostream>
#include <windows.h>

const int BUFFER_SIZE = 256;

int main() {
    // Создание объекта для отображаемой в память памяти
    HANDLE hMapFile = CreateFileMapping(INVALID_HANDLE_VALUE, NULL, PAGE_READWRITE, 0, BUFFER_SIZE, TEXT("Local\\MySharedMemory"));
    if (hMapFile == NULL) {
        std::cerr << "Could not create file mapping object: " << GetLastError() << std::endl;
        return 1;
    }

    // Получение указателя на отображаемую память
    char* pBuf = (char*)MapViewOfFile(hMapFile, FILE_MAP_ALL_ACCESS, 0, 0, BUFFER_SIZE);
    if (pBuf == NULL) {
        std::cerr << "Could not map view of file: " << GetLastError() << std::endl;
        CloseHandle(hMapFile);
        return 1;
    }

    // Запись данных в отображаемую память
    std::cout << "Enter a message to send to the other process: ";
    std::cin.getline(pBuf, BUFFER_SIZE);

    // Ожидание завершения
    std::cout << "Press Enter to exit..." << std::endl;
    std::cin.get();

    // Освобождение ресурсов
    UnmapViewOfFile(pBuf);
    CloseHandle(hMapFile);

    return 0;
}


ВТОРАЯ ПРОГРАММА (читающий процесс):

#include <iostream>
#include <windows.h>

const int BUFFER_SIZE = 256;

int main() {
    // Открытие объекта отображаемой в память памяти
    HANDLE hMapFile = OpenFileMapping(FILE_MAP_READ, FALSE, TEXT("Local\\MySharedMemory"));
    if (hMapFile == NULL) {
        std::cerr << "Could not open file mapping object: " << GetLastError() << std::endl;
        return 1;
    }

    // Получение указателя на отображаемую память
    char* pBuf = (char*)MapViewOfFile(hMapFile, FILE_MAP_READ, 0, 0, BUFFER_SIZE);
    if (pBuf == NULL) {
        std::cerr << "Could not map view of file: " << GetLastError() << std::endl;
        CloseHandle(hMapFile);
        return 1;
    }

    // Чтение данных из отображаемой памяти
    std::cout << "Received message: " << pBuf << std::endl;

    // Освобождение ресурсов
    UnmapViewOfFile(pBuf);
    CloseHandle(hMapFile);

    return 0;
}