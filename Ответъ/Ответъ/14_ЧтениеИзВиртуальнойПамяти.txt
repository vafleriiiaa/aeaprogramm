Сначала запускаем первую программу, вводим какой то текст в консоль, потом запускаем вторую программу, она получает сообщение из первой

Программа 1: Создающая процесс и работающая с виртуальной памятью

#include <iostream>
#include <windows.h>
#include <string>

const int BUFFER_SIZE = 256;

int main() {
    // Создание мьютекса для синхронизации
    HANDLE hMutex = CreateMutex(NULL, FALSE, TEXT("Local\\MyMutex"));
    if (hMutex == NULL) {
        std::cerr << "Could not create mutex: " << GetLastError() << std::endl;
        return 1;
    }

    // Создание объекта для отображаемой в память памяти
    HANDLE hMapFile = CreateFileMapping(INVALID_HANDLE_VALUE, NULL, PAGE_READWRITE, 0, BUFFER_SIZE, TEXT("Local\\MySharedMemory"));
    if (hMapFile == NULL) {
        std::cerr << "Could not create file mapping object: " << GetLastError() << std::endl;
        CloseHandle(hMutex);
        return 1;
    }

    // Получение указателя на отображаемую память
    char* pBuf = (char*)MapViewOfFile(hMapFile, FILE_MAP_ALL_ACCESS, 0, 0, BUFFER_SIZE);
    if (pBuf == NULL) {
        std::cerr << "Could not map view of file: " << GetLastError() << std::endl;
        CloseHandle(hMapFile);
        CloseHandle(hMutex);
        return 1;
    }

    // Запись данных в отображаемую память
    std::string message;
    std::cout << "Enter a message to send to the other process: ";
    std::getline(std::cin, message);

    // Синхронизация доступа к памяти
    WaitForSingleObject(hMutex, INFINITE);
    strcpy_s(pBuf, BUFFER_SIZE, message.c_str());
    ReleaseMutex(hMutex);

    // Ожидание завершения
    std::cout << "Message sent. Press Enter to exit..." << std::endl;
    std::cin.get();

    // Освобождение ресурсов
    UnmapViewOfFile(pBuf);
    CloseHandle(hMapFile);
    CloseHandle(hMutex);

    return 0;
}


Программа 2: Читающая процесс


#include <iostream>
#include <windows.h>
#include <string>

const int BUFFER_SIZE = 256;

int main() {
    // Создание мьютекса для синхронизации
    HANDLE hMutex = CreateMutex(NULL, FALSE, TEXT("Local\\MyMutex"));
    if (hMutex == NULL) {
        std::cerr << "Could not create mutex: " << GetLastError() << std::endl;
        return 1;
    }

    // Открытие объекта отображаемой в память памяти
    HANDLE hMapFile = OpenFileMapping(FILE_MAP_READ, FALSE, TEXT("Local\\MySharedMemory"));
    if (hMapFile == NULL) {
        std::cerr << "Could not open file mapping object: " << GetLastError() << std::endl;
        CloseHandle(hMutex);
        return 1;
    }

    // Получение указателя на отображаемую память
    char* pBuf = (char*)MapViewOfFile(hMapFile, FILE_MAP_READ, 0, 0, BUFFER_SIZE);
    if (pBuf == NULL) {
        std::cerr << "Could not map view of file: " << GetLastError() << std::endl;
        CloseHandle(hMapFile);
        CloseHandle(hMutex);
        return 1;
    }

    // Синхронизация доступа к памяти
    WaitForSingleObject(hMutex, INFINITE);
    std::cout << "Received message: " << pBuf << std::endl;
    ReleaseMutex(hMutex);

    // Освобождение ресурсов
    UnmapViewOfFile(pBuf);
    CloseHandle(hMapFile);
    CloseHandle(hMutex);

    return 0;
}